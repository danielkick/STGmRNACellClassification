split.names <- rownames(seq_raw) %>% strsplit("[.]")
split.names <- unlist(split.names)
Cell.ids <- split.names[seq(1, to = length(split.names), by = 2)]
# Give each dataset a `Cell` column
seq_raw <- cbind(Cell = Cell.ids, seq_raw)
seq_target <- cbind(Cell = Cell.ids, seq_target)
# seq_cell <- cbind(Cell = Cell.ids, seq_cell)
## PCA ========================================================================
# PCA can capture most of the variance
# #because the full seq is too much to work with locally:
# seq_pca <- prcomp(seq_cell[,-1], scale = FALSE)
# #fviz_eig(seq_pca, addlabels = TRUE)
# #factoextra::get_eigenvalue(seq_pca)
#
# seq_pca <- cbind(seq_cell$Cell, as.data.frame(seq_pca$x))
# seq_pca <- rename(seq_pca, Cell = `seq_cell$Cell`)
## HVG ========================================================================
#TODO determine if HVG is useful or if we should drop it.
# temp <- seq_raw[,-1]
# temp <- t(temp)
#
# x.data <- rowMeans(temp)
# y.data <- matrixStats::rowVars(temp)
#
# ggplot()+geom_point(aes(x = log10(x.data), y = log10(y.data)), shape = 1)
#
# #https://hemberg-lab.github.io/scRNA.seq.course/biological-analysis.html#feature-selection
#
# Brennecke_HVG <- M3Drop::BrenneckeGetVariableGenes(
#   temp,
#   fdr = 0.01,
#   minBiolDisp = 0.5
# )
#
# temp <- temp[(rownames(temp) %in% Brennecke_HVG), ]
# temp <- temp %>% t()
# seq_hvg <- cbind(Cell = seq_raw[,1], as.data.frame(temp))
## Generate reduced seq sets ==================================================
seq_raw_k05 <- seq_raw[, k05$V1]
seq_target_k05 <- seq_target[, k05$V1]
# seq_cell_k05 <- seq_cell[, k05$V1]
seq_raw_k2 <- seq_raw[, k2$V1]
seq_target_k2 <- seq_target[, k2$V1]
# seq_cell_k2 <- seq_cell[, k2$V1]
# Chunk 6
# TODO determine if HVG is useful or if we should drop it.
temp <- seq_raw[,-1]
temp <- t(temp)
# x.data <- rowMeans(temp)
# y.data <- matrixStats::rowVars(temp)
#
# ggplot()+geom_point(aes(x = log10(x.data), y = log10(y.data)), shape = 1)
#https://hemberg-lab.github.io/scRNA.seq.course/biological-analysis.html#feature-selection
Brennecke_HVG <- M3Drop::BrenneckeGetVariableGenes(
temp,
fdr = 0.2, #changed to .2 to match the FDR Dr. HH provided us
minBiolDisp = 0.5
)
seq_hvg <- seq_raw[, names(seq_raw) %in% c("Cell", Brennecke_HVG)]
# temp <- temp[(rownames(temp) %in% Brennecke_HVG), ]
# temp <- temp %>% t()
# seq_hvg <- cbind(Cell = seq_raw[,1], as.data.frame(temp))
seq_hvg_target <- predict(preProcess(seq_hvg, method = c("center", "scale")), seq_hvg)
library(edgeR)
# https://combine-australia.github.io/RNAseq-R/06-rnaseq-day1.html
y <- seq_raw[,2:ncol(seq_raw)]
y <- as.matrix(y)
y <- t(y)
# Get log2 counts per million
logcounts <- cpm(y,log=TRUE)
# Check distributions of samples using boxplots
# boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
# # Let's add a blue horizontal line that corresponds to the median logCPM
# abline(h=median(logcounts),col="blue")
# title("Boxplots of logCPMs (unnormalised)")
# We estimate the variance for each row in the logcounts matrix
var_genes <- apply(logcounts, 1, var)
# head(var_genes)
# Get the gene names for the top 500 most variable genes
select_var <- names(sort(var_genes, decreasing=TRUE))[1:2000]
# head(select_var)
seq_h2k <- seq_raw[, names(seq_raw) %in% c("Cell", select_var)]
seq_h2k_target <- predict(preProcess(seq_h2k, method = c("center", "scale")), seq_h2k)
# Chunk 7
mk_pca_transform <- function(d = input.df){
Cell <- d[,1]
d <- prcomp(d[,-1], scale = FALSE)
d <- cbind(Cell, d$x)
return(d)
}
pca_mrna <- mk_pca_transform(d = mrna_raw)
pca_mrna_target <- mk_pca_transform(d = mrna_target)
pca_seq <- mk_pca_transform(d = seq_raw)
pca_seq_target <- mk_pca_transform(d = seq_target)
pca_hvg <- mk_pca_transform(d = seq_hvg)
pca_hvg_target <- mk_pca_transform(d = seq_hvg_target)
pca_h2k <- mk_pca_transform(d = seq_h2k)
pca_h2K_target <- mk_pca_transform(d = seq_h2k_target)
# Chunk 8: round count data
#make sure data is in the right type
mrna_raw[, 2:ncol(mrna_raw)] <- round(mrna_raw[, 2:ncol(mrna_raw)])
seq_hvg[, 2:ncol(seq_hvg)] <- round(seq_hvg[, 2:ncol(seq_hvg)])
seq_h2k[, 2:ncol(seq_h2k)] <- round(seq_h2k[, 2:ncol(seq_h2k)])
# Chunk 9
# ## pcr ====
# mrna_raw <- mrna_raw[1:17, 1:10]
# mrna_target <- mrna_target[1:17, 1:10]
# pca_mrna <- pca_mrna[1:17, 1:10]
# pca_mrna_target <- pca_mrna_target[1:17, 1:10]
#
#
# ## seq ====
# seq_hvg <- seq_hvg[1:19, 1:10]
# seq_hvg_target <- seq_hvg_target[1:19, 1:10]
# seq_h2k <- seq_h2k[1:19, 1:10]
# seq_h2k_target <- seq_h2k_target[1:19, 1:10]
#
# pca_seq <- pca_seq[1:19, 1:10]
# pca_seq_target <- pca_seq_target[1:19, 1:10]
# pca_hvg <- pca_hvg[1:19, 1:10]
# pca_hvg_target <- pca_hvg_target[1:19, 1:10]
# pca_h2k <- pca_h2k[1:19, 1:10]
# pca_h2K_target <- pca_h2K_target[1:19, 1:10]
## pcr ====
mrna_raw <- mrna_raw[, 1:10]
mrna_target <- mrna_target[, 1:10]
pca_mrna <- pca_mrna[, 1:10]
pca_mrna_target <- pca_mrna_target[, 1:10]
## seq ====
seq_hvg <- seq_hvg[, 1:10]
seq_hvg_target <- seq_hvg_target[, 1:10]
seq_h2k <- seq_h2k[, 1:10]
seq_h2k_target <- seq_h2k_target[, 1:10]
pca_seq <- pca_seq[, 1:10]
pca_seq_target <- pca_seq_target[, 1:10]
pca_hvg <- pca_hvg[, 1:10]
pca_hvg_target <- pca_hvg_target[, 1:10]
pca_h2k <- pca_h2k[, 1:10]
pca_h2K_target <- pca_h2K_target[, 1:10]
## With 5 fold CV
ml_models <- purrr::map(1:2, function(i){ #TODO change to account for all
use.input.df <- list(
mrna_raw,
mrna_target#,
# pca_mrna,
# pca_mrna_target,
#
# seq_hvg,
# seq_hvg_target,
# seq_h2k,
# seq_h2k_target,
#
# pca_seq,
# pca_seq_target,
# pca_hvg,
# pca_hvg_target,
# pca_h2k,
# pca_h2K_target
) #seq_pca[, 1:38]
#out <- run_supervised_models(use.seed = 8743436, input.df = use.input.df)
run_supervised_models(use.seed = 8743436, input.df = use.input.df[[i]])
})
name.prefix <- c(
"mrna_raw",
"mrna_target",
"pca_mrna",
"pca_mrna_target",
"seq_hvg",
"seq_hvg_target",
"seq_h2k",
"seq_h2k_target",
"pca_seq",
"pca_seq_target",
"pca_hvg",
"pca_hvg_target",
"pca_h2k",
"pca_h2K_target"
)
for(i in seq_along(ml_models.CV)){
out <- ml_models.CV[[i]]
rValues.LOOCV <- resamples(out)
saveRDS(as.data.frame(rValues.CV$values),
file = paste0(write.to.dir, name.prefix[[i]],"_model_accuracy.RDS"),
row.names = FALSE)
#save the accuracies for future use
write.csv(as.data.frame(rValues.CV$values),
file = paste0(write.to.dir, name.prefix[[i]],"_model_accuracy.csv"),
row.names = FALSE)
}
ml_models.CV <- ml_models
if(save.classify){
name.prefix <- c(
"mrna_raw",
"mrna_target",
"pca_mrna",
"pca_mrna_target",
"seq_hvg",
"seq_hvg_target",
"seq_h2k",
"seq_h2k_target",
"pca_seq",
"pca_seq_target",
"pca_hvg",
"pca_hvg_target",
"pca_h2k",
"pca_h2K_target"
)
# saveRDS(as.data.frame(rValues.CV$values),
#         file = paste0(write.to.dir, name.prefix[[i]],"_model_accuracy.RDS"),
#         row.names = FALSE)
#
#   #save the accuracies for future use
# write.csv(as.data.frame(rValues.CV$values),
#           file = paste0(write.to.dir, name.prefix[[i]],"_model_accuracy.csv"),
#           row.names = FALSE)
for(i in seq_along(ml_models.CV)){
out <- ml_models.CV[[i]]
rValues.LOOCV <- resamples(out)
saveRDS(as.data.frame(rValues.CV$values),
file = paste0(write.to.dir, name.prefix[[i]],"_model_accuracy.RDS"),
row.names = FALSE)
#save the accuracies for future use
write.csv(as.data.frame(rValues.CV$values),
file = paste0(write.to.dir, name.prefix[[i]],"_model_accuracy.csv"),
row.names = FALSE)
}
for(i in seq_along(ml_models.LOOCV)){
out <- ml_models.LOOCV[[i]]
rValues.LOOCV <- resamples(out)
saveRDS(as.data.frame(rValues.LOOCV$values),
file = paste0(write.to.dir, name.prefix[[i]],"_model_accuracy.RDS"),
row.names = FALSE)
#save the accuracies for future use
write.csv(as.data.frame(rValues.LOOCV$values),
file = paste0(write.to.dir, name.prefix[[i]],"_model_accuracy.csv"),
row.names = FALSE)
}
}
for(i in seq_along(ml_models.CV)){
out <- ml_models.CV[[i]]
rValues.LOOCV <- resamples(out)
saveRDS(as.data.frame(rValues.CV$values),
file = paste0(write.to.dir, name.prefix[[i]],"_cv_model_accuracy.RDS")
)
#save the accuracies for future use
write.csv(as.data.frame(rValues.CV$values),
file = paste0(write.to.dir, name.prefix[[i]],"_cv_model_accuracy.csv"),
row.names = FALSE)
}
for(i in seq_along(ml_models.CV)){
out <- ml_models.CV[[i]]
rValues.CV <- resamples(out)
saveRDS(as.data.frame(rValues.CV$values),
file = paste0(write.to.dir, name.prefix[[i]],"_cv_model_accuracy.RDS")
)
#save the accuracies for future use
write.csv(as.data.frame(rValues.CV$values),
file = paste0(write.to.dir, name.prefix[[i]],"_cv_model_accuracy.csv"),
row.names = FALSE)
}
for(i in seq_along(ml_models.LOOCV)){
out <- ml_models.LOOCV[[i]]
rValues.LOOCV <- resamples(out)
saveRDS(as.data.frame(rValues.LOOCV$values),
file = paste0(write.to.dir, name.prefix[[i]],"_loocv_model_accuracy.RDS")
)
#save the accuracies for future use
write.csv(as.data.frame(rValues.LOOCV$values),
file = paste0(write.to.dir, name.prefix[[i]],"_loocv_model_accuracy.csv"),
row.names = FALSE)
}
## With LOOCV ====
ml_models.LOOCV <- purrr::map(1:2, function(i){ #TODO change to account for all
use.input.df <- list(
mrna_raw,
mrna_target#,
# pca_mrna,
# pca_mrna_target,
#
# seq_hvg,
# seq_hvg_target,
# seq_h2k,
# seq_h2k_target,
#
# pca_seq,
# pca_seq_target,
# pca_hvg,
# pca_hvg_target,
# pca_h2k,
# pca_h2K_target
) #seq_pca[, 1:38]
#out <- run_supervised_models(use.seed = 8743436, input.df = use.input.df)
run_supervised_models(use.seed = 8743436, input.df = use.input.df[[i]], train.control = "loocv")
})
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache=F)
tic <- Sys.time()
# General + Plotting ----------------------------------------------------------
library(tidyverse) #ggplot2, purrr, dplyr, tidyr mostly
library(cowplot) #clean up ggplots ands plotgrid
library(M3Drop) #for BrenneckeGetVariableGenes
# install_github("vqv/ggbiplot")
library(ggbiplot)
# Cluster Determination -------------------------------------------------------
library(factoextra) #for fviz_nbclust
library(optCluster)
library(NbClust) #to automate cluster determination for each dataset
# Clustering ------------------------------------------------------------------
library(BiocGenerics) # This is used for clustering assessment
library(pvclust) #for pvclust
library(dendextend) #for cutree coloring dendrograms
library(NMF) #used for calculating purity metric
library(clues) #used for calculating concurrance metrics
# Classification --------------------------------------------------------------
#install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret) # for preProcess and supervised ML models
library(devtools)
devtools::load_all() #needed to have access to SNN.R
# Chunk 3: Conrol block
#What should happen to plots?
#save
#show
#What should happen to output data?
#save
#show
#Which sections should be run?
# Visualizations
## Cluster.estimation ====
run.methods <- T
save.methods <- T
load.methods <- T
run.estimate <- T
save.estimate <- T
load.estimate <- T
## Clustering ====
run.cluster <- T
save.cluster <- T
load.cluster <- T
## Classification ====
run.classify <- T
save.classify <- T
load.classify <- T
run.snn.cliq <- TRUE # SNN Cliq depend on python. This script is written to work on windows and hasn't been tested on Unix/Macos. Needed file is in ../Py. At the point of writing, python version 3.7 has beed tested.
write.to.dir <- paste0(getwd(), "/inst/extdata/output_files/")
use.seed <- 8743436
# Chunk 5: Pull in datasets
# Read in all data ------------------------------------------------------------
mrna_raw <- read.csv(paste0(getwd(),"/inst/extdata/RTqPCR.csv"), row.names = "Sample", header = TRUE) %>% as.data.frame()
seq_raw <- read.csv(paste0(getwd(),"/inst/extdata/scSeq.csv"), row.names = "id", header = TRUE) %>% t() %>% as.data.frame()
k2 <- read.csv(paste0(getwd(),"/inst/extdata/kallisto0.2.csv"), header = F) %>% as.data.frame()
k05 <- read.csv(paste0(getwd(),"/inst/extdata/kallisto0.05.csv"), header = F) %>% as.data.frame()
# Transform RTqPCR data -------------------------------------------------------
mrna_raw <- predict(preProcess(mrna_raw, method = c("medianImpute", "zv")), mrna_raw)
mrna_target <- predict(preProcess(mrna_raw, method = c("center", "scale")), mrna_raw)
# mrna_cell <- mrna_raw[,-1]
# mrna_cell <- as.data.frame(t(mrna_cell))
# mrna_cell <- predict(preProcess(mrna_cell, method = c("center", "scale")), mrna_cell)
# mrna_cell <- cbind(Cell = mrna_raw$Cell, as.data.frame(t(mrna_cell)))
# Transform Seq data ----------------------------------------------------------
seq_raw <- predict(preProcess(seq_raw, method = c("zv")), seq_raw)
seq_target <- predict(preProcess(seq_raw, method = c("center", "scale")), seq_raw)
# # center and scale by cell
# seq_cell <- seq_raw
# seq_cell <- as.data.frame(t(seq_cell))
# seq_cell <- predict(preProcess(seq_cell, method = c("center", "scale")), seq_cell)
# seq_cell <- as.data.frame(t(seq_cell))
# Set up a cell id vector to use in each dataframe
split.names <- rownames(seq_raw) %>% strsplit("[.]")
split.names <- unlist(split.names)
Cell.ids <- split.names[seq(1, to = length(split.names), by = 2)]
# Give each dataset a `Cell` column
seq_raw <- cbind(Cell = Cell.ids, seq_raw)
seq_target <- cbind(Cell = Cell.ids, seq_target)
# seq_cell <- cbind(Cell = Cell.ids, seq_cell)
## PCA ========================================================================
# PCA can capture most of the variance
# #because the full seq is too much to work with locally:
# seq_pca <- prcomp(seq_cell[,-1], scale = FALSE)
# #fviz_eig(seq_pca, addlabels = TRUE)
# #factoextra::get_eigenvalue(seq_pca)
#
# seq_pca <- cbind(seq_cell$Cell, as.data.frame(seq_pca$x))
# seq_pca <- rename(seq_pca, Cell = `seq_cell$Cell`)
## HVG ========================================================================
#TODO determine if HVG is useful or if we should drop it.
# temp <- seq_raw[,-1]
# temp <- t(temp)
#
# x.data <- rowMeans(temp)
# y.data <- matrixStats::rowVars(temp)
#
# ggplot()+geom_point(aes(x = log10(x.data), y = log10(y.data)), shape = 1)
#
# #https://hemberg-lab.github.io/scRNA.seq.course/biological-analysis.html#feature-selection
#
# Brennecke_HVG <- M3Drop::BrenneckeGetVariableGenes(
#   temp,
#   fdr = 0.01,
#   minBiolDisp = 0.5
# )
#
# temp <- temp[(rownames(temp) %in% Brennecke_HVG), ]
# temp <- temp %>% t()
# seq_hvg <- cbind(Cell = seq_raw[,1], as.data.frame(temp))
## Generate reduced seq sets ==================================================
seq_raw_k05 <- seq_raw[, k05$V1]
seq_target_k05 <- seq_target[, k05$V1]
# seq_cell_k05 <- seq_cell[, k05$V1]
seq_raw_k2 <- seq_raw[, k2$V1]
seq_target_k2 <- seq_target[, k2$V1]
# seq_cell_k2 <- seq_cell[, k2$V1]
# Chunk 6
# TODO determine if HVG is useful or if we should drop it.
temp <- seq_raw[,-1]
temp <- t(temp)
# x.data <- rowMeans(temp)
# y.data <- matrixStats::rowVars(temp)
#
# ggplot()+geom_point(aes(x = log10(x.data), y = log10(y.data)), shape = 1)
#https://hemberg-lab.github.io/scRNA.seq.course/biological-analysis.html#feature-selection
Brennecke_HVG <- M3Drop::BrenneckeGetVariableGenes(
temp,
fdr = 0.2, #changed to .2 to match the FDR Dr. HH provided us
minBiolDisp = 0.5
)
seq_hvg <- seq_raw[, names(seq_raw) %in% c("Cell", Brennecke_HVG)]
# temp <- temp[(rownames(temp) %in% Brennecke_HVG), ]
# temp <- temp %>% t()
# seq_hvg <- cbind(Cell = seq_raw[,1], as.data.frame(temp))
seq_hvg_target <- predict(preProcess(seq_hvg, method = c("center", "scale")), seq_hvg)
library(edgeR)
# https://combine-australia.github.io/RNAseq-R/06-rnaseq-day1.html
y <- seq_raw[,2:ncol(seq_raw)]
y <- as.matrix(y)
y <- t(y)
# Get log2 counts per million
logcounts <- cpm(y,log=TRUE)
# Check distributions of samples using boxplots
# boxplot(logcounts, xlab="", ylab="Log2 counts per million",las=2)
# # Let's add a blue horizontal line that corresponds to the median logCPM
# abline(h=median(logcounts),col="blue")
# title("Boxplots of logCPMs (unnormalised)")
# We estimate the variance for each row in the logcounts matrix
var_genes <- apply(logcounts, 1, var)
# head(var_genes)
# Get the gene names for the top 500 most variable genes
select_var <- names(sort(var_genes, decreasing=TRUE))[1:2000]
# head(select_var)
seq_h2k <- seq_raw[, names(seq_raw) %in% c("Cell", select_var)]
seq_h2k_target <- predict(preProcess(seq_h2k, method = c("center", "scale")), seq_h2k)
# Chunk 7
mk_pca_transform <- function(d = input.df){
Cell <- d[,1]
d <- prcomp(d[,-1], scale = FALSE)
d <- cbind(Cell, d$x)
return(d)
}
pca_mrna <- mk_pca_transform(d = mrna_raw)
pca_mrna_target <- mk_pca_transform(d = mrna_target)
pca_seq <- mk_pca_transform(d = seq_raw)
pca_seq_target <- mk_pca_transform(d = seq_target)
pca_hvg <- mk_pca_transform(d = seq_hvg)
pca_hvg_target <- mk_pca_transform(d = seq_hvg_target)
pca_h2k <- mk_pca_transform(d = seq_h2k)
pca_h2K_target <- mk_pca_transform(d = seq_h2k_target)
# Chunk 8: round count data
#make sure data is in the right type
mrna_raw[, 2:ncol(mrna_raw)] <- round(mrna_raw[, 2:ncol(mrna_raw)])
seq_hvg[, 2:ncol(seq_hvg)] <- round(seq_hvg[, 2:ncol(seq_hvg)])
seq_h2k[, 2:ncol(seq_h2k)] <- round(seq_h2k[, 2:ncol(seq_h2k)])
clMethods.list
out1 <- optCluster(
obj = seq_h2k[, 2:52],
nClust = seq(from = 2, to = 10, by = 1),
clMethods = c("em.nbinom",  "da.nbinom",  "sa.nbinom",  "em.poisson", "da.poisson", "sa.poisson"),
countData = T,
validation = "internal", # internal", "stability", "biological", "all"
hierMethod = "ward", # "average", "complete", "single", and "ward"
annotation = NULL, # Used in biological validation
clVerbose = FALSE,
rankMethod = "CE",
distance = "Spearman",
importance = NULL,
rankVerbose = FALSE
)
out1 <- optCluster(
obj = seq_h2k[, 2:52],
nClust = seq(from = 2, to = 10, by = 1),
clMethods = c(
"em.nbinom",
# "da.nbinom",
"sa.nbinom"#,
# "em.poisson",
# "da.poisson",
# "sa.poisson"
),
countData = T,
validation = "internal", # internal", "stability", "biological", "all"
hierMethod = "ward", # "average", "complete", "single", and "ward"
annotation = NULL, # Used in biological validation
clVerbose = FALSE,
rankMethod = "CE",
distance = "Spearman",
importance = NULL,
rankVerbose = FALSE
)
out1
clMethods.list
clMethods.list[[7]] <- clMethods.list[[5]]
clMethods.list
save(clMethods.list, file = paste0(write.to.dir, "clMethods.list"))
