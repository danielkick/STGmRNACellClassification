if (avail.methods.conti[i] == "hierarchical.average"){
use.clMethods <- "hierarchical"
use.hierMethod <- "average"
}else if(avail.methods.conti[i] == "hierarchical.complete"){
use.clMethods <- "hierarchical"
use.hierMethod <- "complete"
}else if(avail.methods.conti[i] == "hierarchical.single"){
use.clMethods <- "hierarchical"
use.hierMethod <- "single"
}else if(avail.methods.conti[i] == "hierarchical.ward"){
use.clMethods <- "hierarchical"
use.hierMethod <- "ward"
}else{
use.clMethods <- avail.methods.conti[i]
use.hierMethod <- "average"
}
temp.out <- NA
temp.out <- optCluster(input.df,
seq(from = min.k, to = max.k, by = 1),
clMethods = use.clMethods,
countData = F,
validation = "internal", #internal", "stability", "biological", "all"
hierMethod = use.hierMethod, #"average", "complete", "single", and "ward"
annotation = NULL, #Used in biological validation
clVerbose = FALSE, #If TRUE, the progress of cluster validation will be produced as output.
rankMethod = "CE", #cross-entropy Monte Carlo algorithm ("CE") or Genetic algorithm ("GA"). Selection of only one method is allowed
distance = "Spearman", #The two available methods are the weighted Spearman footrule distance ("Spearman") or the weighted Kendall’s tau distance ("Kendall"). Selection of only one distance is allowed.
importance = NULL,
rankVerbose = FALSE)
if (typeof(temp.out) == "S4"){
output.list[[i]]$ranks <- temp.out@ranksWeights$ranks
output.list[[i]]$weights <- temp.out@ranksWeights$weights
}else if (typeof(temp.out) == "logical"){
output.list[[i]]$ranks <- NA
output.list[[i]]$weights <- NA
}else{
warning(paste0("At i=", as.character(i), " temp.out is neither type S4 nor logical."))
}
}
output.list
output.list[[1]][3,]
output.list[[1]][[1]][3, ]
seq_along(output.list)
d <- list()
for (i in seq_along(output.list)){
d$ranks <- c(d$ranks,  output.list[[i]][[1]][3, ])
d$weights <- c(d$weights,  output.list[[i]][[2]][3, ])
}
d
#Make sure that the hierarchical values get the appropriate method
d <- as.data.frame(d)
d
# Prepare output
d <- list()
for (i in seq_along(output.list)){
d$ranks <- c(d$ranks,  output.list[[i]][[1]][3, ])
d$weights <- c(d$weights,  output.list[[i]][[2]][3, ])
}
stringr::str_starts(avail.methods.conti, "hierarchical")
stringr::str_remove(avail.methods.conti, "hierarchical")
i=4
stringr::str_starts(avail.methods.conti[i], "hierarchical")
add.to.name <- stringr::str_remove(avail.methods.conti[i], "hierarchical.")
add.to.name
output.list[[i]][[1]][[3]]
stringr::str_split(output.list[[i]][[1]][[3]], "-")
paste0(temp.str[1], ".", add.to.name, "-", temp.str[2])
temp.str <- stringr::str_split(output.list[[i]][[1]][[3]], "-")
paste0(temp.str[1], ".", add.to.name, "-", temp.str[2])
paste0(as.character(temp.str[1]), ".", add.to.name, "-", as.character(temp.str[2]))
str(temp.str)
temp.str[[1]]
temp.str[1]
temp.str[[1]][1]
paste0(as.character(temp.str[[1]][1]), ".", add.to.name, "-", as.character(temp.str[[1]][2]))
for (i in seq_along(avail.methods.conti)){
if (stringr::str_starts(avail.methods.conti[i], "hierarchical")){
add.to.name <- stringr::str_remove(avail.methods.conti[i], "hierarchical.")
temp.str <- stringr::str_split(output.list[[i]][[1]][[3]], "-")
output.list[[i]][[1]][[3]] <- paste0(as.character(temp.str[[1]][1]), ".", add.to.name, "-", as.character(temp.str[[1]][2]))
}
}
# Prepare output
d <- list()
for (i in seq_along(output.list)){
d$ranks <- c(d$ranks,  output.list[[i]][[1]][3, ])
d$weights <- c(d$weights,  output.list[[i]][[2]][3, ])
}
d <- as.data.frame(d)
d
stringr::str_split(output.list[[i]][[1]][3, ], "-")
output.list[[i]][[1]][3, ]
output.list[[i]][[1]][3, ]
%>% length()
length(output.list[[i]][[1]][3, ])
for (i in seq_along(avail.methods.conti)){
if (stringr::str_starts(avail.methods.conti[i], "hierarchical")){
add.to.name <- stringr::str_remove(avail.methods.conti[i], "hierarchical.")
for (j in seq(from = 1, to =  length(output.list[[i]][[1]][3, ]))){
temp.str <- stringr::str_split(output.list[[i]][[1]][3, j], "-")
output.list[[i]][[1]][3, j] <- paste0(as.character(temp.str[[1]][1]), ".", add.to.name, "-", as.character(temp.str[[1]][2]))
}
}
}
# Prepare output
d <- list()
for (i in seq_along(output.list)){
d$ranks <- c(d$ranks,  output.list[[i]][[1]][3, ])
d$weights <- c(d$weights,  output.list[[i]][[2]][3, ])
}
d <- as.data.frame(d)
d
separate(d, ranks, c(key, value), "-")
separate(d, ranks, c("key", "value"), "-")
d <- separate(d, ranks, c("Method", "Cluster"), "-")
for (i in seq_along(avail.methods.conti)){
if (stringr::str_starts(avail.methods.conti[i], "hierarchical")){
add.to.name <- stringr::str_remove(avail.methods.conti[i], "hierarchical.")
for (j in seq(from = 1, to =  length(output.list[[i]][[1]][3, ]))){
temp.str <- stringr::str_split(output.list[[i]][[1]][3, j], "-")
output.list[[i]][[1]][3, j] <- paste0(as.character(temp.str[[1]][1]), ".", add.to.name, "-", as.character(temp.str[[1]][2]))
}
}
}
# Prepare output
d <- list()
for (i in seq_along(output.list)){
d$ranks <- c(d$ranks,  output.list[[i]][[1]][3, ])
d$weights <- c(d$weights,  output.list[[i]][[2]][3, ])
}
d <- as.data.frame(d)
d <- separate(d, ranks, c("Method", "k"), "-")
d
head(d)
ggplot(d, aes(x = weights, y = k, color = Method))+
lemon::geom_pointline()
ggplot(d, aes(x = weights, y = k, color = Method))+
geom_point()
avail.methods.conti <- c("agnes", "clara", "diana", #"fanny",
"hierarchical.average", "hierarchical.complete", "hierarchical.single", "hierarchical.ward",
"kmeans", "model", "pam"#, #"som",
#"sota"
)
input.df <- seq_hvg_target[,-1]
min.k <- 2
max.k <- 10
# output.list <- list()
output.list <- vector("list", length = length(avail.methods.conti))
for (i in seq_along(avail.methods.conti)){
print(avail.methods.conti[i])
if (avail.methods.conti[i] == "hierarchical.average"){
use.clMethods <- "hierarchical"
use.hierMethod <- "average"
}else if(avail.methods.conti[i] == "hierarchical.complete"){
use.clMethods <- "hierarchical"
use.hierMethod <- "complete"
}else if(avail.methods.conti[i] == "hierarchical.single"){
use.clMethods <- "hierarchical"
use.hierMethod <- "single"
}else if(avail.methods.conti[i] == "hierarchical.ward"){
use.clMethods <- "hierarchical"
use.hierMethod <- "ward"
}else{
use.clMethods <- avail.methods.conti[i]
use.hierMethod <- "average"
}
temp.out <- NA
temp.out <- optCluster(input.df,
seq(from = min.k, to = max.k, by = 1),
clMethods = use.clMethods,
countData = F,
validation = "internal", #internal", "stability", "biological", "all"
hierMethod = use.hierMethod, #"average", "complete", "single", and "ward"
annotation = NULL, #Used in biological validation
clVerbose = FALSE, #If TRUE, the progress of cluster validation will be produced as output.
rankMethod = "CE", #cross-entropy Monte Carlo algorithm ("CE") or Genetic algorithm ("GA"). Selection of only one method is allowed
distance = "Spearman", #The two available methods are the weighted Spearman footrule distance ("Spearman") or the weighted Kendall’s tau distance ("Kendall"). Selection of only one distance is allowed.
importance = NULL,
rankVerbose = FALSE)
if (typeof(temp.out) == "S4"){
output.list[[i]]$ranks <- temp.out@ranksWeights$ranks
output.list[[i]]$weights <- temp.out@ranksWeights$weights
}else if (typeof(temp.out) == "logical"){
output.list[[i]]$ranks <- NA
output.list[[i]]$weights <- NA
}else{
warning(paste0("At i=", as.character(i), " temp.out is neither type S4 nor logical."))
}
}
for (i in seq_along(avail.methods.conti)){
if (stringr::str_starts(avail.methods.conti[i], "hierarchical")){
add.to.name <- stringr::str_remove(avail.methods.conti[i], "hierarchical.")
for (j in seq(from = 1, to =  length(output.list[[i]][[1]][3, ]))){
temp.str <- stringr::str_split(output.list[[i]][[1]][3, j], "-")
output.list[[i]][[1]][3, j] <- paste0(as.character(temp.str[[1]][1]), ".", add.to.name, "-", as.character(temp.str[[1]][2]))
}
}
}
# Prepare output
d <- list()
for (i in seq_along(output.list)){
d$ranks <- c(d$ranks,  output.list[[i]][[1]][3, ])
d$weights <- c(d$weights,  output.list[[i]][[2]][3, ])
}
d <- as.data.frame(d)
d <- separate(d, ranks, c("Method", "k"), "-")
ggplot(d, aes(x = weights, y = k, color = Method))+
geom_point()
ggplot(d, aes(x = weights, y = k, color = Method))+
#geom_point()
lemon::geom_pointline()
ggplot(d, aes(x = weights, y = k, color = Method))+
geom_point()
ggplot(d, aes(x = weights, y = k, color = Method))+
geom_point()+
geom_line()
ggplot(d, aes(x = weights, y = k))+
geom_point()+
geom_line()
ggplot(d, aes(x = weights, y = k))+
geom_point()+
geom_line(aes(group = 1))
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0.1, height = 0.1))+
geom_line(aes(group = 1))
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0.001, height = 0.001))+
geom_line(aes(group = 1))
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0.001, height = 0.01))+
geom_line(aes(group = 1))
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0.001, height = 0.1))+
geom_line(aes(group = 1))
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0.2))+
geom_line(aes(group = 1))
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0.2))+
geom_line(aes(group = 1))+
geom_hline(yintercept = 4, type = "dash")
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0.2))+
geom_line(aes(group = 1))+
geom_hline(yintercept = 4, linetype = "dash")
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0.2))+
geom_line(aes(group = 1))+
geom_hline(yintercept = 4, linetype = "dash")
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0.2))+
geom_line(aes(group = 1))+
geom_hline(yintercept = 4, line = "dash")
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0.2))+
geom_line(aes(group = 1))+
geom_hline(yintercept = 4, type = "dash")
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0.2))+
geom_line(aes(group = 1))+
geom_hline(yintercept = 4, type = "-")
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0.2))+
geom_line(aes(group = 1))+
geom_hline(yintercept = 4, linetype = 2)
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0))+
geom_line(aes(group = 1))+
geom_hline(yintercept = 4, linetype = 2)+
facet_grid(.~Method)
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0))+
geom_line(aes(group = 1))+
geom_hline(yintercept = 4, linetype = 2)+
facet_grid(Method~.)
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0))+
geom_line(aes(group = Method))+
geom_hline(yintercept = 4, linetype = 2)
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0))+
geom_line(aes(group = Method), position = position_jitter(width = 0, height = 10))+
geom_hline(yintercept = 4, linetype = 2)
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0))+
geom_line(aes(group = Method), position = position_jitter(width = 0, height = 0.2))+
geom_hline(yintercept = 4, linetype = 2)
str(d)
d$k <- as.numeric(d$k)
ggplot(d, aes(x = weights, y = k))+
geom_point(position = position_jitter(width = 0, height = 0))+
geom_line(aes(group = Method), position = position_jitter(width = 0, height = 0.2))+
geom_hline(yintercept = 4, linetype = 2)
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_jitter(width = 0, height = 0.2), size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_jitter(width = 0, height = 0.2), size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_jitter(width = 0, height = 0.2), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodge(), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodge(width = 0.2), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodge(width = 0.01), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(color = Method), position = position_dodge(width = 0.01), alpha = 0.3, size = 2)+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodge(width = 0.01), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
install.packages("ggstance")
library(ggstance)
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(color = Method), position = position_dodgev(height = 0.01))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodge(width = 0.01), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
#geom_line(aes(color = Method), position = position_dodgev(height = 0.01))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodgev(width = 0.01), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
#geom_line(aes(color = Method), position = position_dodgev(height = 0.01))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodgev(width = 0.01), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
#geom_line(aes(color = Method), position = position_dodgev(height = 0.01))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodgev(heigt = 0.01), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
#geom_line(aes(color = Method), position = position_dodgev(height = 0.01))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodgev(height = 0.01), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
#geom_line(aes(color = Method), position = position_dodgev(height = 0.01))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodgev(height = 0.1), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
#geom_line(aes(color = Method), position = position_dodgev(height = 0.01))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodgev(height = 0.3), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(group = Method), position = position_dodgev(height = 0.3))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodgev(height = 0.3), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(color = Method), position = position_dodgev(height = 0.3))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodgev(height = 0.3), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(color = Method), position = position_dodgev(height = 0.3))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodgev(height = 0.3), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
coord_cartesian(ylim = 0, 10)+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_line(aes(color = Method), position = position_dodgev(height = 0.3))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodgev(height = 0.3), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
coord_cartesian(ylim = c(0, 10))+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_hline(yintercept = seq(0,10), color = "gray")+
geom_line(aes(color = Method), position = position_dodgev(height = 0.3))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = position_dodgev(height = 0.3), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
coord_cartesian(ylim = c(0, 10))+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_hline(yintercept = seq(0,10), color = "gray")+
geom_line(aes(color = Method), position = ggstance::position_dodgev(height = 0.5))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = ggstance::position_dodgev(height = 0.5), alpha = 0.3, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
coord_cartesian(ylim = c(0, 10))+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_hline(yintercept = seq(0,10), color = "gray")+
geom_line(aes(color = Method), position = ggstance::position_dodgev(height = 0.5))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = ggstance::position_dodgev(height = 0.5), alpha = 0.1, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
coord_cartesian(ylim = c(0, 10))+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_hline(yintercept = seq(0,10), color = "gray")+
geom_line(aes(color = Method), position = ggstance::position_dodgev(height = 0.5))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = ggstance::position_dodgev(height = 0.5), alpha = 0.9, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
coord_cartesian(ylim = c(0, 10))+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_hline(yintercept = seq(0,10), color = "gray")+
geom_line(aes(color = Method), position = ggstance::position_dodgev(height = 0.5))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = ggstance::position_dodgev(height = 0.5), alpha = 0.7, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
coord_cartesian(ylim = c(0, 10))+
theme(legend.position = "bottom")
ggplot(d, aes(x = weights, y = k))+
geom_hline(yintercept = seq(0,10), color = "gray")+
geom_line(aes(color = Method), position = ggstance::position_dodgev(height = 0.5))+
# geom_line(aes(group = Method, color = Method), position = position_jitter(width = 0, height = 0.2))+
geom_point(aes(color = Method), position = ggstance::position_dodgev(height = 0.5), alpha = 0.7, size = 2)+
geom_hline(yintercept = 4, linetype = 2)+
coord_cartesian(ylim = c(2, 6))+
theme(legend.position = "bottom")
optCluster(input.df,
seq(from = min.k, to = max.k, by = 1),
clMethods = c("agnes", "clara", "diana",
"hierarchical.average", "hierarchical.complete", "hierarchical.single", "hierarchical.ward",
"kmeans", "model", "pam"),
countData = F,
validation = "internal", #internal", "stability", "biological", "all"
hierMethod = use.hierMethod, #"average", "complete", "single", and "ward"
annotation = NULL, #Used in biological validation
clVerbose = FALSE, #If TRUE, the progress of cluster validation will be produced as output.
rankMethod = "CE", #cross-entropy Monte Carlo algorithm ("CE") or Genetic algorithm ("GA"). Selection of only one method is allowed
distance = "Spearman", #The two available methods are the weighted Spearman footrule distance ("Spearman") or the weighted Kendall’s tau distance ("Kendall"). Selection of only one distance is allowed.
importance = NULL,
rankVerbose = FALSE)
optCluster(input.df,
seq(from = min.k, to = max.k, by = 1),
clMethods = c("agnes", "clara", "diana",
"hierarchical",
"kmeans", "model", "pam"),
countData = F,
validation = "internal", #internal", "stability", "biological", "all"
hierMethod = use.hierMethod, #"average", "complete", "single", and "ward"
annotation = NULL, #Used in biological validation
clVerbose = FALSE, #If TRUE, the progress of cluster validation will be produced as output.
rankMethod = "CE", #cross-entropy Monte Carlo algorithm ("CE") or Genetic algorithm ("GA"). Selection of only one method is allowed
distance = "Spearman", #The two available methods are the weighted Spearman footrule distance ("Spearman") or the weighted Kendall’s tau distance ("Kendall"). Selection of only one distance is allowed.
importance = NULL,
rankVerbose = FALSE)
out2 <- optCluster(input.df,
seq(from = min.k, to = max.k, by = 1),
clMethods = c("agnes", "clara", "diana",
"hierarchical",
"kmeans", "model", "pam"),
countData = F,
validation = "internal", #internal", "stability", "biological", "all"
hierMethod = "ward", #"average", "complete", "single", and "ward"
annotation = NULL, #Used in biological validation
clVerbose = FALSE, #If TRUE, the progress of cluster validation will be produced as output.
rankMethod = "CE", #cross-entropy Monte Carlo algorithm ("CE") or Genetic algorithm ("GA"). Selection of only one method is allowed
distance = "Spearman", #The two available methods are the weighted Spearman footrule distance ("Spearman") or the weighted Kendall’s tau distance ("Kendall"). Selection of only one distance is allowed.
importance = NULL,
rankVerbose = FALSE)
out2 <- optCluster(input.df,
seq(from = min.k, to = max.k, by = 1),
clMethods = c("agnes", "clara", "diana",
"hierarchical",
"kmeans", "model", "pam"),
countData = F,
validation = "internal", #internal", "stability", "biological", "all"
hierMethod = "ward", #"average", "complete", "single", and "ward"
annotation = NULL, #Used in biological validation
clVerbose = FALSE, #If TRUE, the progress of cluster validation will be produced as output.
rankMethod = "CE", #cross-entropy Monte Carlo algorithm ("CE") or Genetic algorithm ("GA"). Selection of only one method is allowed
distance = "Spearman", #The two available methods are the weighted Spearman footrule distance ("Spearman") or the weighted Kendall’s tau distance ("Kendall"). Selection of only one distance is allowed.
importance = NULL,
rankVerbose = FALSE)
